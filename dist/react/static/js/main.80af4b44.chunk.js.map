{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","About","Topic","_ref","match","params","id","Topics","_ref2","Link","to","concat","url","Route","path","component","exact","render","Header","App","class","href","HashRouter","App_Header","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","collect","type","src","sessionStorage","getItem","s","getElementsByTagName","parentNode","insertBefore","_XT","push","userConfig","dcpChannelCode"],"mappings":"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","file":"static/js/main.80af4b44.chunk.js","sourcesContent":["import './App.css';\r\nimport React from \"react\";\r\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nconst App = () => (\r\n  <div>\r\n    <div class=\"sidebar\">\r\n      <ul>\r\n        <li>\r\n          <a href=\"/\">首页</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/demoA\">demoA</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/demoB\">demoB</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/demoC\">demoC</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/phoneList\">手机号</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/heatMap\">热力图</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/angular/index.html\">angular</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/react/index.html\">react</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/vue/index.html\">vue</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div class=\"container\">\r\n      <Router>\r\n        <div>\r\n          <Header />\r\n\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/about\" component={About} />\r\n          <Route path=\"/topics\" component={Topics} />\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst Home = () => <h2>Home</h2>;\r\nconst About = () => <h2>About</h2>;\r\nconst Topic = ({ match }) => <h3>Requested Param: {match.params.id}</h3>;\r\nconst Topics = ({ match }) => (\r\n  <div>\r\n    <h2>Topics</h2>\r\n\r\n    <ul>\r\n      <li>\r\n        <Link to={`${match.url}/components`}>Components</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\r\n      </li>\r\n    </ul>\r\n\r\n    <Route path={`${match.path}/:id`} component={Topic} />\r\n    <Route\r\n      exact\r\n      path={match.path}\r\n      render={() => <h3>Please select a topic.</h3>}\r\n    />\r\n  </div>\r\n);\r\nconst Header = () => (\r\n  <ul>\r\n    <li>\r\n      <Link to=\"/\">Home</Link>\r\n    </li>\r\n    <li>\r\n      <Link to=\"/about\">About</Link>\r\n    </li>\r\n    <li>\r\n      <Link to=\"/topics\">Topics</Link>\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\nlet domainUrl = 'localhost:8080'\r\n// let domainUrl = 'testcollect.fengdai.org'; // 测试环境是 'testcollect.fengdai.org',生产环境是 'collect.trc.com',开发人员上线时候记得修改此配置,可根据自己的情况手动更改或者通过打包命令更改.\r\nlet collect = document.createElement('script');\r\ncollect.type = 'text/javascript'\r\ncollect.src = `//${domainUrl}${sessionStorage.getItem('dcp_version') === 'V2.0.0' ? '/index_2.0.0.js' : '/index.js'}`;\r\nlet s = document.getElementsByTagName('script')[0];\r\ns.parentNode.insertBefore(collect, s);\r\nwindow._XT = window._XT || []; //定义信息配置对象\r\nwindow._XT.push(['Target', 'div']); //无埋点行为采集\r\nwindow._XT.push(['auth', '93c55350e179a3676c905723e112b440']); //处于安全性考虑的传参\r\n// 用户自定义收集字段,现在传的是接入方的渠道码\r\nwindow._XT.userConfig = {\r\n  dcpChannelCode: 've3dC41i'\r\n}"],"sourceRoot":""}